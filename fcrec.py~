
# coding: utf-8

# Face Recognition with OpenCV

# To detect faces, I will use the code from my previous article on [face detection](https://www.superdatascience.com/opencv-face-detection/). So if you have not read it, I encourage you to do so to understand how face detection works and its Python coding. 

# ### Import Required Modules

# Before starting the actual coding we need to import the required modules for coding. So let's import them first. 
# 
# - **cv2:** is _OpenCV_ module for Python which we will use for face detection and face recognition.
# - **os:** We will use this Python module to read our training directories and file names.
# - **numpy:** We will use this module to convert Python lists to numpy arrays as OpenCV face recognizers accept numpy arrays.

# In[1]:

    
#import OpenCV module
import cv2
#import os module for reading training data directories and paths
import os
#import numpy to convert python lists to numpy arrays as 
#it is needed by OpenCV face recognizers
import numpy as np
import tkinter as tk
import action
from cryptIt import Application 



# In[2]:

    #there is no label 0 in our training data so subject name for index/label 0 is empty


class Recognize:
    def __init__(self):
        self.subjects=[""]
        names= input("Enter your name:\n")
        self.subjects.append(names)
            
        
        print("Preparing data...")
        print(self.subjects)
        self.faces, self.labels = self.prepare_training_data("training-data")
        print("Data prepared")
    

        #print total faces and labels
        print("Total faces: ", len(self.faces))
        print("Total labels: ", len(self.labels))


        

        #create our LBPH face recognizer 
        self.face_recognizer = cv2.face.LBPHFaceRecognizer_create()

        
        self.face_recognizer.train(self.faces, np.array(self.labels))

        
        self.face_recognizer = cv2.face.LBPHFaceRecognizer_create()

        
        self.face_recognizer.train(self.faces, np.array(self.labels))
        
        print("Predicting images...")
        cap = cv2.VideoCapture(0)
        ret = cap.set(3,640)
        ret = cap.set(4,480)
           
        while(True):
                # Capture frame-by-frame
            ret, test_image = cap.read()
            cv2.imshow('Video', test_image)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

            # When everything done, release the capture
        cap.release()
        cv2.destroyAllWindows()
            

        #perform a prediction
        predicted_img1 = self.predict(test_image)

                

        print("Prediction complete")

        #display both images
        cv2.imshow(self.subjects[1],predicted_img1)
        def trial():
            if predicted_img1.any():
                return True
            else:
                return False
                

        cv2.waitKey(0)
        cv2.destroyAllWindows()



    def enterText(self):
        self.window=tk.Tk()
        self.window.geometry('300x200')
        self.window.title('Enter text')
        
        self.btn=tk.Button(self.window, text='Click')
        self.btn.place(x=300, y=70)
    
    def detect_face(self,img):
        #convert the test image to gray image as opencv face detector expects gray images
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        #load OpenCV face detector, I am using LBP which is fast
        #there is also a more accurate but slow Haar classifier
        face_cascade = cv2.CascadeClassifier('opencv-files/lbpcascade_frontalface.xml')

        #let's detect multiscale (some images may be closer to camera than others) images
        #result is a list of faces
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5);
        
        #if no faces are detected then return original img
        if (len(faces) == 0):
            return None, None
        
        #under the assumption that there will be only one face,
        #extract the face area
        (x, y, w, h) = faces[0]
        
        #return only the face part of the image
        return gray[y:y+w, x:x+h], faces[0]


    # I am using OpenCV's **LBP face detector**. On _line 4_, I convert the image to grayscale because most operations in OpenCV are performed in gray scale, then on _line 8_ I load LBP face detector using `cv2.CascadeClassifier` class. After that on _line 12_ I use `cv2.CascadeClassifier` class' `detectMultiScale` method to detect all the faces in the image. on _line 20_, from detected faces I only pick the first face because in one image there will be only one face (under the assumption that there will be only one prominent face). As faces returned by `detectMultiScale` method are actually rectangles (x, y, width, height) and not actual faces images so we have to extract face image area from the main image. So on _line 23_ I extract face area from gray image and return both the face image area and face rectangle.
    # 
    # Now you have got a face detector and you know the 4 steps to prepare the data, so are you ready to code the prepare data step? Yes? So let's do it. 

    # In[4]:

    #this function will read all persons' training images, detect face from each image
    #and will return two lists of exactly same size, one list 
    # of faces and another list of labels for each face
    def store(self,direct):
        folder= direct+'/s1'
        cap2 = cv2.VideoCapture(0)
        ret = cap2.set(3,640)
        ret = cap2.set(4,480)
        count=0
        while(count<=10):
            
            success, image = cap2.read()
            #cv2.imwrite(os.path.join(folder, "frame{:d}.jpg".format(count)), image)
            cv2.imwrite(os.path.join(folder,"frame%d.jpg" %count), image)
           
            #cv2.imshow('Video', frame)        
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            count+=1


    def prepare_training_data(self,data_folder_path):
        self.store(data_folder_path)
        
        
        #------STEP-1--------
        #get the directories (one directory for each subject) in data folder
        dirs = os.listdir(data_folder_path)
        #os.listdir(directory_name)-gets you everything that is in a directory, files and directories
        
        #list to hold all subject faces
        faces = []
        #list to hold labels for all subjects
        labels = []
        
        #let's go through each directory and read images within it
        for dir_name in dirs:
            
            #our subject directories start with letter 's' so
            #ignore any non-relevant directories if any
            if not dir_name.startswith("s"):
                continue;
                
            #------STEP-2--------
            #extract label number of subject from dir_name
            #format of dir name = slabel
            #, so removing letter 's' from dir_name will give us label
            label = int(dir_name.replace("s", ""))
            
            #build path of directory containin images for current subject subject
            #sample subject_dir_path = "training-data/s1"
            subject_dir_path = data_folder_path + "/" + dir_name
            
            #get the images names that are inside the given subject directory
            subject_images_names = os.listdir(subject_dir_path)
            
            #------STEP-3--------
            #go through each image name, read image, 
            #detect face and add face to list of faces
            for image_name in subject_images_names:
                
                #ignore system files like .DS_Store
                if image_name.startswith("."):
                    continue;
                
                #build image path
                #sample image path = training-data/s1/1.pgm
                image_path = subject_dir_path + "/" + image_name

                #read image
                image = cv2.imread(image_path)
                
                #display an image window to show the image 
                cv2.imshow("Training on image...", cv2.resize(image, (400, 500)))
                cv2.waitKey(100)
                
                #detect face
                face, rect = self.detect_face(image)
                
                #------STEP-4--------
                #for the purpose of this tutorial
                #we will ignore faces that are not detected
                if face is not None:
                    #add face to list of faces
                    faces.append(face)
                    #add label for this face
                    labels.append(label)
                
        cv2.destroyAllWindows()
        cv2.waitKey(1)
        cv2.destroyAllWindows()
        
        return faces, labels


  

    
    def draw_rectangle(self,img, rect):
        (x, y, w, h) = rect
        cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
        
    #function to draw text on give image starting from
    #passed (x, y) coordinates. 
    def draw_text(self,img, text, x, y):
        cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)
        #cv2.putText(img, text, startPoint, font, fontSize, rgbColor, lineWidth)


   
    def predict(self,test_img):
            
        #detect face from the image
        face, rect = self.detect_face(test_img)

        #predict the image using our face recognizer 
        label, confidence = self.face_recognizer.predict(face)
        #get name of respective label returned by face recognizer
        label_text = self.subjects[label]
        
        #draw a rectangle around face detected
        self.draw_rectangle(test_img, rect)
        #draw name of predicted person
        self.draw_text(test_img, label_text, rect[0], rect[1]-5)
        
        return test_img

        
        

    # Now that we have the prediction function well defined, next step is to actually call this function on our test images and display those test images to see if our face recognizer correctly recognized them. So let's do it. This is what we have been waiting for. 

    # In[10]:

    
if __name__=="__main__":
    pass






