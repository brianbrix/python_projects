from __future__ import print_function
from PIL import Image
from PIL import ImageTk
import tkinter as tk
import threading
import datetime
import imutils
import cv2
import os


class PhotoBoothApp:
    def __init__(self, vs, outputPath):
# store the video stream object and output path, then initialize
		# the most recently read frame, thread for reading frames, and
		# the thread stop event
        
        
        self.outputPath = outputPath
        self.vs=vs
        self.frame = None
        self.thread = None
        self.stopEvent = None

        # initialize the root window and image panel
        self.root = tk.Tk()
        self.panel = None
        btn=tk.Button(self.root, text="Snap", command=self.takeSnap)
        btn.pack(side="bottom", fill="both",expand="yes", padx=10, pady=10)
        
        #start a thread that constantly pools the video sensor 
        #for the most recently read frame
        self.stopEvent= threading.Event()
        self.thread= threading.Thread(target=self.videoLoop, args=())
        self.thread.start()
        #set a callback to handle when the windo is closed
        self.root.wm_title("Boot")
        self.root.wm_protocol("WM_DELETE_WINDOW", self.onClose)
        
        
    def videoLoop(self):
       
        try:
            while not self.stopEvent.is_set():
                self.frame=self.vs.read()
                self.frame=imutils.resize(self.frame, width=300)
                #opencv presents the images in BGR oredr
                #while PIL presents them in RGB , so we have 
                #to swipe them 
                self.image= cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
               # self.image=Image.fromarray(self.image)
                self.image=ImageTk.PhotoImage(Image.fromarray(self.image))
                
                if self.panel is None:
                    self.panel=tk.Label(image=self.image)
                    self.panel.image=self.image
                    self.panel.pack(side="left", padx=10, pady=10)
                else:
                    self.panel.configure(image=self.image)
                    self.panel.image=self.image
        except RuntimeError as e:
            print("Experienced runtime erro")
        
    def takeSnap(self):
        ts=datetime.datetime.now()
        filename="{}.jpg".format(ts.strftime("%Y-%m-%d_%H-%M-%S"))
        p= os.path.sep.join((self.outputPath, filename))
        cv2.imwrite(p, self.frame.copy())
        print("[INFO] saved {}". format(filename))
    def onClose(self):
        print("[INFO] closing...")
        self.stopEvent.set()
        self.vs.stop()
        self.root.quit()
        
if __name__=="__main__":
    pass
                
                    
            
        
    
        
        
        
        
        
        
        
        